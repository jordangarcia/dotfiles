"-------------------------------------------------------------------------------
" Tabs & Formatting
"-------------------------------------------------------------------------------
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set nu
set nobackup
set nowritebackup
set noswapfile
set mouse=a

" List chars
set listchars=""          " Reset the listchars
set listchars=tab:\ \     " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.    " show trailing spaces as dots
set listchars+=extends:>  " The character to show in the last column when wrap is
                          " off and the line continues beyond the right of the screen
set listchars+=precedes:< " The character to show in the last column when wrap is
                          " off and the line continues beyond the right of the screen

" Function : HuddlerPHPTestFilePath
" Purpose  : Return guessed path to associated unit test of current file
" Returns  : file path
" Author   : loganlinn <logan@loganlinn.com>
fun! HuddlerPHPTestFilePath()
  return substitute(substitute(expand("%:p"), 'v2/system', 'tests/phpunit', ''), '\.php', 'Test.php', '')
endfun

fun! HuddlerJSTestFilePath()
  return substitute(expand("%:p"), 'js/', 'tests/jasmine/specs/', '')
endfun

" Function : FindOrCreateBuffer (PRIVATE)
" Purpose  : searches the buffer list (:ls) for the specified filename. If
"            found, checks the window list for the buffer. If the buffer is in
"            an already open window, it switches to the window. If the buffer
"            was not in a window, it switches to that buffer. If the buffer did
"            not exist, it creates it.
" Args     : filename (IN) -- the name of the file
"            doSplit (IN) -- indicates whether the window should be split
"                            ("v", "h", "n", "v!", "h!", "n!", "t", "t!") 
"            findSimilar (IN) -- indicate weather existing buffers should be
"                                prefered
" Returns  : nothing
" Author   : Michael Sharpe <feline@irendi.com>
" Copied from "Alternate Files" plugin http://www.vim.org/scripts/script.php?script_id=31
" TODO: Put in util file"
function! <SID>FindOrCreateBuffer(fileName, doSplit, findSimilar)
  " Check to see if the buffer is already open before re-opening it.
  let FILENAME = escape(a:fileName, ' ')
  let bufNr = -1
  let lastBuffer = bufnr("$")
  let i = 1
  if (a:findSimilar)
    while i <= lastBuffer
      if expand("#".i.":p") == a:fileName
        let bufNr = i
        break
      endif
      let i = i + 1
    endwhile
  endif

  let splitType = a:doSplit[0]
  let bang = a:doSplit[1]
  if (bufNr == -1)
    " Buffer did not exist....create it
    let v:errmsg=""
    if (splitType == "h")
      silent! execute ":split".bang." " . FILENAME
    elseif (splitType == "v")
      silent! execute ":vsplit".bang." " . FILENAME
    elseif (splitType == "t")
      silent! execute ":tab split".bang." " . FILENAME
    else
      silent! execute ":e".bang." " . FILENAME
    endif
    if (v:errmsg != "")
      echo v:errmsg
    endif
  else

    " Find the correct tab corresponding to the existing buffer
    let tabNr = -1
    " iterate tab pages
    for i in range(tabpagenr('$'))
      " get the list of buffers in the tab
      let tabList =  tabpagebuflist(i + 1)
      let idx = 0
      " iterate each buffer in the list
      while idx < len(tabList)
        " if it matches the buffer we are looking for...
        if (tabList[idx] == bufNr)
          " ... save the number
          let tabNr = i + 1
          break
        endif
        let idx = idx + 1
      endwhile
      if (tabNr != -1)
        break
      endif
    endfor
    " switch the the tab containing the buffer
    if (tabNr != -1)
      execute "tabn ".tabNr
    endif

    " Buffer was already open......check to see if it is in a window
    let bufWindow = bufwinnr(bufNr)
    if (bufWindow == -1) 
      " Buffer was not in a window so open one
      let v:errmsg=""
      if (splitType == "h")
        silent! execute ":sbuffer".bang." " . FILENAME
      elseif (splitType == "v")
        silent! execute ":vert sbuffer " . FILENAME
      elseif (splitType == "t")
        silent! execute ":tab sbuffer " . FILENAME
      else
        silent! execute ":buffer".bang." " . FILENAME
      endif
      if (v:errmsg != "")
        echo v:errmsg
      endif
    else
      " Buffer is already in a window so switch to the window
      execute bufWindow."wincmd w"
      if (bufWindow != winnr()) 
        " something wierd happened...open the buffer
        let v:errmsg=""
        if (splitType == "h")
          silent! execute ":split".bang." " . FILENAME
        elseif (splitType == "v")
          silent! execute ":vsplit".bang." " . FILENAME
        elseif (splitType == "t")
          silent! execute ":tab split".bang." " . FILENAME
        else
          silent! execute ":e".bang." " . FILENAME
        endif
        if (v:errmsg != "")
          echo v:errmsg
        endif
      endif
    endif
  endif
endfunction

autocmd FileType php comm! -bang J  call <SID>FindOrCreateBuffer(HuddlerPHPTestFilePath(), "n<bang>", 1)
autocmd FileType php comm! -bang JS call <SID>FindOrCreateBuffer(HuddlerPHPTestFilePath(), "h<bang>", 1)
autocmd FileType php comm! -bang JV call <SID>FindOrCreateBuffer(HuddlerPHPTestFilePath(), "v<bang>", 1)
autocmd FileType php comm! -bang JT call <SID>FindOrCreateBuffer(HuddlerPHPTestFilePath(), "t<bang>", 1)
autocmd FileType javascript comm! -bang J  call <SID>FindOrCreateBuffer(HuddlerJSTestFilePath(), "n<bang>", 1)
autocmd FileType javascript comm! -bang JS call <SID>FindOrCreateBuffer(HuddlerJSTestFilePath(), "h<bang>", 1)
autocmd FileType javascript comm! -bang JV call <SID>FindOrCreateBuffer(HuddlerJSTestFilePath(), "v<bang>", 1)
autocmd FileType javascript comm! -bang JT call <SID>FindOrCreateBuffer(HuddlerJSTestFilePath(), "t<bang>", 1)

" Huddler whitespace conventions: use tabs, 4 space width
fun! SetHuddlerWhitespace()
  "Ignore certain filetypes
  if &ft =~ 'clojure'
    return
  endif
  set ts=4 sts=4 sw=4 noexpandtab
endfun
autocmd BufRead,BufNewFile */www/* call SetHuddlerWhitespace()
autocmd BufRead,BufNewFile */huddler/* call SetHuddlerWhitespace()

" Disable folding
set nofoldenable

" FileType specific
"" Java
autocmd FileType java setlocal expandtab

"" Clojure
augroup ft_clojure
  au!
  au FileType clojure setlocal lispwords+=describe,it,testing,facts,fact,provided,defroutes,defproject
  au FileType clojure setlocal lispwords+=with-connection,with-query-results,with-naming-strategy,with-quoted-identifiers
  au FileType clojure setlocal lispwords+=sql/with-connection,sql/with-query-results,sql/with-naming-strategy,sql/with-quoted-identifiers,sql/update-values,sql/insert-record,sql/insert-records,sql/insert!,sql/delete-rows

  " Indent top-level form.
  au FileType clojure nmap <buffer> <localleader>= mz99[(v%='z
augroup END

"-------------------------------------------------------------------------------
" Colors
"-------------------------------------------------------------------------------
" Clear color on vim-gitgutter gutter
au VimEnter * highlight clear SignColumn

" Highlight 81st column
"set textwidth=90
set colorcolumn=+1

"-------------------------------------------------------------------------------
" Abbreviations
"-------------------------------------------------------------------------------
iabbrev ldis ಠ_ಠ
iabbrev lsad ಥ_ಥ
iabbrev lhap ಥ‿ಥ
iabbrev lmis ಠ‿ಠ

"-------------------------------------------------------------------------------
" Mappings
"-------------------------------------------------------------------------------
" Leaders
let mapleader = ","
let maplocalleader = "\\"

" Huddler
noremap <Leader>d :e $PROJECTS/huddler/common/defines.php<Enter>:vsp $PROJECTS/huddler/config/sites/logan.huddler.com/conf/config.overrides.php<Enter>:sp $PROJECTS/huddler/config/sites/logan.huddler.com/conf/config.db.php<Enter>
noremap <Leader>dt :tabnew<Enter><Leader>d
noremap <Leader>dc :e $PROJECTS/huddler/v2/system/application/libraries/HuddlerController.php<Enter>:vsp $PROJECTS/huddler/v2/system/application/libraries/HuddlerMobileController.php<Enter>:vsp $PROJECTS/huddler/v2/system/application/libraries/Huddler/Controller.php<Enter>

" Last tab binding
let g:lasttab = 1
nmap <c-w>; :exe "tabn ".g:lasttab<cr>
au TabLeave * let g:lasttab = tabpagenr()

" Safely alias :we to :w
cnoreabbrev <expr> we ((getcmdtype() is# ':' && getcmdline() is# 'w')?('we'):('w'))

" From https://github.com/sjl/dotfiles/blob/master/vim/vimrc: Fuck you, help key
noremap  <F1> :set invfullscreen<CR>
inoremap <F1> <ESC>:set invfullscreen<CR>a

" Don't move on *
nnoremap * *<c-o>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Heresy
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A

"-------------------------------------------------------------------------------
" Plugin Settings
"-------------------------------------------------------------------------------
" jslint
let $JS_CMD='node'

" Powerline
let g:Powerline_symbols='fancy'

" VimClojure
let g:vimclojure#WantNailgun = 1
let g:vimclojure#NailgunClient = $HOME."/vimclojure/client/ng"
let g:vimclojure#HighlightBuiltins = 1
let g:vimclojure#DynamicHighlighting = 1
let g:vimclojure#ParenRainbow = 1
let g:vimclojure#SetupKeyMapEvalToplevel = 0
let g:vimclojure#SetupKeyMapRunTests = 0
let vimclojure#SplitPos = "right"

" Paredit
"let g:paredit_electric_return=1

" Syntastic
let g:syntastic_auto_loc_list = 1
let g:syntastic_javascript_jsl_conf = "-conf ~/.jslconf"
let g:syntastic_mode_map = {
    \ 'mode': 'active',
    \ 'active_filetypes': [],
    \ 'passive_filetypes': ['sass', 'scss']
  \}

" CtrlP
"let g:ctrlp_switch_buffer = 0
"let g:ctrlp_user_command = {
    "\ 'types': {
      "\ 1: ['.git', 'cd %s && git ls-files'],
      "\ 2: ['.hg', 'hg --cwd %s locate -I .'],
      "\ },
    "\ 'fallback': 'find %s -type f'
  "\ }

" Ack
nnoremap <leader>a :Ack!<space>
let g:ackprg = 'ag --nogroup --nocolor --column'

" Tagbar
"" Move focus to tagbar when it opens to make it usable for windows on right side
let g:tagbar_autofocus = 1

" PIV
let g:DisableAutoPHPFolding = 1

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 0

" spf13-vim
let g:spf13_no_autochdir = 1

" vim-javascript
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" kein/rainbow_parens.vim
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"-------------------------------------------------------------------------------
" General Settings & Modifications
"-------------------------------------------------------------------------------
" Disable session dialog
let g:session_autosave='no'

" Enable filetype plugin
filetype plugin on

" Tabline modifications
if has('gui')
  set guioptions-=e
endif
if exists("+showtabline")
  function! MyTabLine()
    let s = ''
    let t = tabpagenr()
    let i = 1
    while i <= tabpagenr('$')
      let buflist = tabpagebuflist(i)
      let winnr = tabpagewinnr(i)
      let s .= '%' . i . 'T'
      let s .= (i == t ? '%1*' : '%2*')
      let s .= ' '
      let s .= i . ':'
      let s .= winnr . '/' . tabpagewinnr(i,'$')
      let s .= ' %*'
      let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
      let bufnr = buflist[winnr - 1]
      let file = bufname(bufnr)
      let buftype = getbufvar(bufnr, 'buftype')
      if buftype == 'nofile'
        if file =~ '\/.'
          let file = substitute(file, '.*\/\ze.', '', '')
        endif
      else
        let file = fnamemodify(file, ':p:t')
      endif
      if file == ''
        let file = '[No Name]'
      endif
      let s .= file
      let i = i + 1
    endwhile
    let s .= '%T%#TabLineFill#%='
    let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
    return s
  endfunction
  set stal=2
  set tabline=%!MyTabLine()
endif
